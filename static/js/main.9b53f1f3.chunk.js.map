{"version":3,"sources":["DrumPad.js","data.js","PadBank.js","App.js","serviceWorker.js","index.js"],"names":["DrumPad","props","handleClick","bind","document","getElementById","this","keyTrigger","play","innerHTML","id","className","onClick","style","backgroundColor","padding","display","justifyContent","alignItems","border","width","height","margin","boxShadow","cursor","src","url","React","Component","bankOne","keyCode","PadBank","pad","map","item","key","float","marginTop","marginRight","gridTemplateColumns","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0MA6CeA,E,kDA1Cb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,YAAc,EAAKA,YAAYC,KAAjB,gBAHF,E,0DAMHC,SAASC,eAAeC,KAAKL,MAAMM,YAC3CC,OACNJ,SAASC,eAAe,WAAWI,UAAYH,KAAKL,MAAMS,K,+BAiB1D,OACE,yBACEC,UAAU,WACVD,GAAIJ,KAAKL,MAAMS,GACfE,QAASN,KAAKJ,YACdW,MAnBc,CAChBC,gBAAiB,SACjBC,QAAS,GACTC,QAAS,OACTC,eAAgB,SAChBC,WAAY,SACZC,OAAQ,kBACRC,MAAO,IACPC,OAAQ,IACRC,OAAQ,EACRC,UAAW,oBACXC,OAAQ,YAUN,2BACEb,UAAU,OACVc,IAAKnB,KAAKL,MAAMyB,IAChBhB,GAAIJ,KAAKL,MAAMM,aAEhBD,KAAKL,MAAMM,gB,GAtCEoB,IAAMC,WCsDbC,EAxDC,CACd,CACEC,QAAS,GACTvB,WAAY,IACZG,GAAI,WACJgB,IAAK,4DAEP,CACEI,QAAS,GACTvB,WAAY,IACZG,GAAI,WACJgB,IAAK,4DAEP,CACEI,QAAS,GACTvB,WAAY,IACZG,GAAI,WACJgB,IAAK,4DAEP,CACEI,QAAS,GACTvB,WAAY,IACZG,GAAI,WACJgB,IAAK,8DAEP,CACEI,QAAS,GACTvB,WAAY,IACZG,GAAI,OACJgB,IAAK,4DAEP,CACEI,QAAS,GACTvB,WAAY,IACZG,GAAI,UACJgB,IAAK,0DAEP,CACEI,QAAS,GACTvB,WAAY,IACZG,GAAI,cACJgB,IAAK,8DAEP,CACEI,QAAS,GACTvB,WAAY,IACZG,GAAI,OACJgB,IAAK,8DAEP,CACEI,QAAS,GACTvB,WAAY,IACZG,GAAI,YACJgB,IAAK,2DCXMK,MAtCf,SAAiB9B,GACf,IAkBM+B,EAAMH,EAAQI,KAAI,SAACC,GACvB,OACE,kBAAC,EAAD,CACEC,IAAKD,EAAKJ,QACVpB,GAAIwB,EAAKxB,GACTH,WAAY2B,EAAK3B,WACjBmB,IAAKQ,EAAKR,SAIhB,OACE,6BACE,yBAAKhB,GAAG,UAAUG,MA9BP,CACbC,gBAAiB,SACjBsB,MAAO,QACPf,OAAQ,IACRD,MAAO,IACPiB,UAAW,GACXC,YAAa,GACbf,UAAW,oBACXP,QAAS,OACTC,eAAgB,SAChBC,WAAY,YAqBV,yBAAKP,UAAU,WAAWE,MAnBb,CACfwB,UAAW,IACXrB,QAAS,OACTuB,oBAAqB,iBACrBtB,eAAgB,WAgBXe,K,MCzBMQ,MARf,WACE,OACE,yBAAK9B,GAAG,gBACN,kBAAC,EAAD,QCKc+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF5C,SAASC,eAAe,SDyHpB,kBAAmB4C,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.9b53f1f3.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass DrumPad extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n  handleClick() {\r\n    const sound = document.getElementById(this.props.keyTrigger);\r\n    sound.play();\r\n    document.getElementById(\"display\").innerHTML = this.props.id;\r\n  }\r\n  render() {\r\n    const DrumStyle = {\r\n      backgroundColor: \"orange\",\r\n      padding: 10,\r\n      display: \"flex\",\r\n      justifyContent: \"center\",\r\n      alignItems: \"center\",\r\n      border: \"2px solid black\",\r\n      width: 100,\r\n      height: 100,\r\n      margin: 5,\r\n      boxShadow: \"3px 3px 5px black\",\r\n      cursor: \"pointer\",\r\n    };\r\n\r\n    return (\r\n      <div\r\n        className=\"drum-pad\"\r\n        id={this.props.id}\r\n        onClick={this.handleClick}\r\n        style={DrumStyle}\r\n      >\r\n        <audio\r\n          className=\"clip\"\r\n          src={this.props.url}\r\n          id={this.props.keyTrigger}\r\n        ></audio>\r\n        {this.props.keyTrigger}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default DrumPad;\r\n","const bankOne = [\r\n  {\r\n    keyCode: 81,\r\n    keyTrigger: \"Q\",\r\n    id: \"Heater-1\",\r\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3\",\r\n  },\r\n  {\r\n    keyCode: 87,\r\n    keyTrigger: \"W\",\r\n    id: \"Heater-2\",\r\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3\",\r\n  },\r\n  {\r\n    keyCode: 69,\r\n    keyTrigger: \"E\",\r\n    id: \"Heater-3\",\r\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3\",\r\n  },\r\n  {\r\n    keyCode: 65,\r\n    keyTrigger: \"A\",\r\n    id: \"Heater-4\",\r\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3\",\r\n  },\r\n  {\r\n    keyCode: 83,\r\n    keyTrigger: \"S\",\r\n    id: \"Clap\",\r\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3\",\r\n  },\r\n  {\r\n    keyCode: 68,\r\n    keyTrigger: \"D\",\r\n    id: \"Open-HH\",\r\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3\",\r\n  },\r\n  {\r\n    keyCode: 90,\r\n    keyTrigger: \"Z\",\r\n    id: \"Kick-n'-Hat\",\r\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3\",\r\n  },\r\n  {\r\n    keyCode: 88,\r\n    keyTrigger: \"X\",\r\n    id: \"Kick\",\r\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3\",\r\n  },\r\n  {\r\n    keyCode: 67,\r\n    keyTrigger: \"C\",\r\n    id: \"Closed-HH\",\r\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3\",\r\n  },\r\n];\r\nexport default bankOne;\r\n","import React from \"react\";\r\nimport DrumPad from \"./DrumPad\";\r\nimport bankOne from \"./data\";\r\n\r\nfunction PadBank(props) {\r\n  const Styled = {\r\n    backgroundColor: \"orange\",\r\n    float: \"right\",\r\n    height: 100,\r\n    width: 250,\r\n    marginTop: 10,\r\n    marginRight: 30,\r\n    boxShadow: \"3px 3px 5px black\",\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n  };\r\n  const padStyle = {\r\n    marginTop: 120,\r\n    display: \"grid\",\r\n    gridTemplateColumns: \"auto auto auto\",\r\n    justifyContent: \"center\",\r\n  };\r\n  const pad = bankOne.map((item) => {\r\n    return (\r\n      <DrumPad\r\n        key={item.keyCode}\r\n        id={item.id}\r\n        keyTrigger={item.keyTrigger}\r\n        url={item.url}\r\n      />\r\n    );\r\n  });\r\n  return (\r\n    <div>\r\n      <div id=\"display\" style={Styled}></div>\r\n      <div className=\"pad-bank\" style={padStyle}>\r\n        {pad}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default PadBank;\r\n","import React from \"react\";\nimport PadBank from \"./PadBank\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div id=\"drum-machine\">\n      <PadBank />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}